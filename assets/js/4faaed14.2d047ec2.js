"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[226],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>b});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),u=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=u(e.components);return o.createElement(c.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=u(n),d=r,b=p["".concat(c,".").concat(d)]||p[d]||m[d]||i;return n?o.createElement(b,a(a({ref:t},s),{},{components:n})):o.createElement(b,a({ref:t},s))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:r,a[1]=l;for(var u=2;u<i;u++)a[u]=n[u];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},58368:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var o=n(87462),r=(n(67294),n(3905));const i={},a="Mobile",l={unversionedId:"Mobile",id:"Mobile",title:"Mobile",description:"Spark allows you to activate an action manually. This is especially useful to implement mobile touch controls.",source:"@site/docs/Mobile.md",sourceDirName:".",slug:"/Mobile",permalink:"/spark/docs/Mobile",draft:!1,editUrl:"https://github.com/nezuo/spark/edit/master/docs/Mobile.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Getting Started",permalink:"/spark/docs/GettingStarted"}},c={},u=[],s={toc:u},p="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,o.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"mobile"},"Mobile"),(0,r.kt)("p",null,"Spark allows you to activate an action manually. This is especially useful to implement mobile touch controls."),(0,r.kt)("p",null,"For buttons, you can activate an action with ",(0,r.kt)("inlineCode",{parentName:"p"},"Actions:hold"),". Here's how you might implement a mobile button:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local imageButton = Instance.new("ImageButton")\n\nlocal hold = nil\n\nimageButton.InputBegan:Connect(function(inputObject)\n    if inputObject.UserInputState ~= Enum.UserInputState.Begin then\n        -- UserInputState will be Change if the touch was dragged onto the button.\n        return\n    end\n\n    -- You can either check if inputObject.UserInputType == Enum.UserInputType.Touch or hide\n    -- the button when touch isn\'t being used.\n\n    if hold == nil then\n        hold = {\n            -- The hold method acts like a button press. It returns a function to stop the press.\n            stopHold = actions:hold("attack"),\n            inputObject = inputObject,\n        }\n    end\nend)\n\nimageButton.InputEnded:Connect(function(inputObject)\n    -- Only stop the hold if it\'s the same touch that started it.\n    if hold ~= nil and hold.inputObject == inputObject then\n        hold.stopHold()\n        hold = nil\n    end\nend)\n')),(0,r.kt)("p",null,"For 2D axis values like movement or camera movement, use ",(0,r.kt)("inlineCode",{parentName:"p"},"Actions:move"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local thumbstickDirection = Vector2.one -- Get this value from your thumbstick.\n\n-- This will increase the 2D axis value of the move action by thumbstickDirection.\n-- It\'s reset every time `Actions:update` is called, so you need to call it every frame.\nactions:move("move", thumbstickDirection)\n')))}m.isMDXComponent=!0}}]);