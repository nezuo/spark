"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[72],{62067:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a new `Actions`.","params":[{"name":"actions","desc":"List of action names","lua_type":"{ string }"}],"returns":[{"desc":"","lua_type":"Actions"}],"function_type":"static","source":{"line":68,"path":"src/Actions.luau"}},{"name":"setAssociatedGamepad","desc":"Sets the gamepad that will be used to check for gamepad inputs.\\n\\n```lua\\nlocal actions = Actions.new({ \\"move\\", \\"jump\\" })\\nactions:setAssociatedGamepad(Enum.UserInputType.Gamepad1)\\n```","params":[{"name":"gamepad","desc":"","lua_type":"Enum.UserInputType"}],"returns":[],"function_type":"method","source":{"line":109,"path":"src/Actions.luau"}},{"name":"removeAssociatedGamepad","desc":"Removes the associated gamepad and instead uses the first connected gamepad.","params":[],"returns":[],"function_type":"method","source":{"line":117,"path":"src/Actions.luau"}},{"name":"setRebuildBindings","desc":"Sets the callback that binds inputs to actions.\\n\\nThe callback will be called in this function and whenever [Actions:rebuildBindings] is called.\\n\\n```lua\\nlocal actions = Actions.new({ \\"move\\", \\"jump\\" }):setRebuildBindings(function(bindings)\\n\\tbindings:bind(\\"jump\\", Enum.KeyCode.Space)\\nend)\\n```","params":[{"name":"rebuildBindings","desc":"","lua_type":"(bindings: Bindings) -> ()"}],"returns":[{"desc":"Returns self","lua_type":"Actions"}],"function_type":"method","source":{"line":135,"path":"src/Actions.luau"}},{"name":"rebuildBindings","desc":"Updates action bindings by calling the callback set by [Actions:setRebuildBindings].","params":[],"returns":[],"function_type":"method","source":{"line":146,"path":"src/Actions.luau"}},{"name":"update","desc":"Updates action states.\\n\\nThis should be called once every frame before calling [InputState:clear].","params":[{"name":"inputState","desc":"","lua_type":"InputState"}],"returns":[],"function_type":"method","source":{"line":167,"path":"src/Actions.luau"}},{"name":"pressed","desc":"Returns whether `action` is currently pressed.","params":[{"name":"action","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","source":{"line":228,"path":"src/Actions.luau"}},{"name":"released","desc":"Returns whether `action` is currently released.","params":[{"name":"action","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","source":{"line":238,"path":"src/Actions.luau"}},{"name":"justPressedSignal","desc":"Returns a [Signal] that is fired when `action` is pressed.\\n\\n```lua\\nlocal disconnect = actions:justPressedSignal(\\"jump\\"):connect(function()\\n\\tprint(\\"Jump pressed!\\")\\nend)\\n\\ndisconnect()\\n```","params":[{"name":"action","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Signal"}],"function_type":"method","source":{"line":256,"path":"src/Actions.luau"}},{"name":"justReleasedSignal","desc":"Returns a [Signal] that is fired when `action` is released.\\n\\n```lua\\nlocal disconnect = actions:justReleasedSignal(\\"jump\\"):connect(function()\\n\\tprint(\\"Jump released!\\")\\nend)\\n\\ndisconnect()\\n```","params":[{"name":"action","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Signal"}],"function_type":"method","source":{"line":274,"path":"src/Actions.luau"}},{"name":"axis","desc":"Returns the sum of the axis values of each input bound to `action`.\\n\\nThe axis value of an input depends on its kind:\\n- Buttons have a value of `0` when released and `1` when pressed.\\n- [Enum.UserInputType.MouseWheel] returns the `Z` value of [InputObject.Position].\\n- [VirtualAxis] returns the value of the positive input minus the value of the negative input.\\n- 2D axis values like [Enum.UserInputType.MouseMovement], [Enum.KeyCode.Thumbstick1], or [VirutalAxis2d] will return their magnitude.\\n\\n:::warning\\nThe return value is not clamped to any range.\\n:::","params":[{"name":"action","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"number"}],"function_type":"method","source":{"line":294,"path":"src/Actions.luau"}},{"name":"axis2d","desc":"Returns the sum of axis 2D values of each input bound to `action`.\\n\\nThe axis 2D value of an input depends on its kind:\\n- Buttons and 1D axis values like [Enum.UserInputType.MouseWheel] or [VirtualAxis] will always return [Vector2.zero].\\n- [Enum.KeyCode.Thumbstick1] and [Enum.KeyCode.Thumbstick2] returns the `(X, Y)` value of [InputObject.Position].\\n- [Enum.UserInputType.MouseMovement] returns the `(X, -Y)` value of [InputObject.Delta].\\n- [VirtualAxis2d] returns `Vector2.new(rightValue - leftValue, upValue - downValue)`.\\n\\n:::warning\\nThe returned Vector2 is not clamped to any range. Consider using [Actions:normalizedAxis2d] or [Actions:clampedAxis2d].\\n:::","params":[{"name":"action","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Vector2"}],"function_type":"method","source":{"line":314,"path":"src/Actions.luau"}},{"name":"normalizedAxis2d","desc":"Returns the [Actions:axis2d] value but normalized. If the value is `Vector2.zero`, `Vector2.zero` will be returned.","params":[{"name":"action","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Vector2"}],"function_type":"method","source":{"line":324,"path":"src/Actions.luau"}},{"name":"clampedAxis2d","desc":"Returns the [Actions:axis2d] value but with the length clamped to `1`. This allows for `Vector2s` with a length less than `1` which is useful for gamepad and mobile thumbsticks.","params":[{"name":"action","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Vector2"}],"function_type":"method","source":{"line":340,"path":"src/Actions.luau"}},{"name":"moveAxis","desc":"Increases the axis value of `action` by `value`.\\n\\nThis value resets after [Actions:update] is called.","params":[{"name":"action","desc":"","lua_type":"string"},{"name":"value","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":362,"path":"src/Actions.luau"}},{"name":"moveAxis2d","desc":"Increases the axis 2D value of `action` by `value`.\\n\\nThis value resets after [Actions:update] is called.","params":[{"name":"action","desc":"","lua_type":"string"},{"name":"value","desc":"","lua_type":"Vector2"}],"returns":[],"function_type":"method","source":{"line":374,"path":"src/Actions.luau"}},{"name":"getInputsByDevices","desc":"Returns the list of inputs bound to `action` that belong to the given `devices`.\\n\\nIf a [VirtualAxis] or [VirtualAxis2d] has a [Button] that belongs to `deviecs` it will be included.\\n\\n```lua\\nlocal actions = Actions.new({ \\"action\\" }):setRebuildBindings(function(bindings)\\n\\tbindings:bind(\\"action\\", Enum.KeyCode.Space, Enum.UserInputType.MouseButton1)\\nend)\\n\\nprint(actions:getInputsByDevices(\\"action\\", { \\"Keyboard\\" })) -- { Enum.KeyCode.Space }\\nprint(actions:getInputsByDevices(\\"action\\", { \\"Mouse\\" })) -- { Enum.UserInputType.MouseButton1 }\\n```","params":[{"name":"action","desc":"","lua_type":"string"},{"name":"devices","desc":"","lua_type":"{ Device }"}],"returns":[{"desc":"","lua_type":"{ Input }"}],"function_type":"method","source":{"line":396,"path":"src/Actions.luau"}}],"properties":[],"types":[],"name":"Actions","desc":"`Actions` allows you to bind inputs to actions and read their state.\\n\\n```lua\\nlocal actions = Actions.new({ \\"move\\", \\"jump\\" }):setRebuildBindings(function(bindings)\\n\\tbindings:bind(\\"move\\", VirtualAxis2d.new({\\n\\t\\tup = Enum.KeyCode.W,\\n\\t\\tdown = Enum.KeyCode.S,\\n\\t\\tleft = Enum.KeyCode.A,\\n\\t\\tright = Enum.KeyCode.D\\n\\t}))\\n\\tbindings:bind(\\"jump\\", Enum.KeyCode.Space)\\nend)\\n\\nlocal disconnect = actions:justPressedSignal(\\"jump\\"):connect(function()\\n\\tprint(\\"Jumped!\\")\\nend)\\n\\nlocal moveVector = actions:axis2d(\\"move\\")\\n```\\n\\nTo get auto-completion and type checking for the action names, cast Actions like this:\\n```lua\\nlocal actions = (Actions.new({ \\"move\\", \\"jump\\" }) :: any) :: Spark.Actions<\\"move\\" | \\"jump\\">\\n```\\n\\n:::note\\n[Actions:update] should be called every frame before calling [InputState:clear].\\n:::","source":{"line":59,"path":"src/Actions.luau"}}')}}]);