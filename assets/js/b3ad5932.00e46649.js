"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[451],{58477:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a new `Actions`.","params":[{"name":"actions","desc":"List of action names","lua_type":"{ string }"}],"returns":[{"desc":"","lua_type":"Actions"}],"function_type":"static","source":{"line":33,"path":"src/Actions.lua"}},{"name":"update","desc":"Updates action states.\\n\\nThis should be called once every frame before calling [InputState:clear].","params":[{"name":"inputState","desc":"","lua_type":"InputState"},{"name":"inputMap","desc":"The associated InputMap","lua_type":"InputMap"}],"returns":[],"function_type":"method","source":{"line":65,"path":"src/Actions.lua"}},{"name":"pressed","desc":"Returns whether `action` is currently pressed.","params":[{"name":"action","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","source":{"line":117,"path":"src/Actions.lua"}},{"name":"released","desc":"Returns whether `action` is currently released.","params":[{"name":"action","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","source":{"line":127,"path":"src/Actions.lua"}},{"name":"justPressedSignal","desc":"Returns a [Signal] that is fired when `action` is pressed.\\n\\n```lua\\nlocal disconnect = actions:justPressedSignal(\\"jump\\"):connect(function()\\n\\tprint(\\"Jump pressed!\\")\\nend)\\n\\ndisconnect()\\n```","params":[{"name":"action","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Signal"}],"function_type":"method","source":{"line":145,"path":"src/Actions.lua"}},{"name":"justReleasedSignal","desc":"Returns a [Signal] that is fired when `action` is released.\\n\\n```lua\\nlocal disconnect = actions:justReleasedSignal(\\"jump\\"):connect(function()\\n\\tprint(\\"Jump released!\\")\\nend)\\n\\ndisconnect()\\n```","params":[{"name":"action","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Signal"}],"function_type":"method","source":{"line":163,"path":"src/Actions.lua"}},{"name":"value","desc":"Returns the sum of the values of each input bound to `action`.\\n\\nThe value of an input depends on its kind:\\n- Buttons have a value of `0` when released and `1` when pressed.\\n- [Enum.UserInputType.MouseWheel] returns the `Z` value of [InputObject.Position].\\n- [VirtualAxis] returns the value of the positive input minus the value of the negative input.\\n- 2D axis values like [Enum.UserInputType.MouseMovement], [Enum.KeyCode.Thumbstick1], or [VirutalAxis2d] will return their magnitude.\\n\\n:::warning\\nThe return value is not clamped to any range.\\n:::","params":[{"name":"action","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"number"}],"function_type":"method","source":{"line":183,"path":"src/Actions.lua"}},{"name":"axis2d","desc":"Returns the sum of `Vector2` values of each input bound to `action`.\\n\\nThe value of an input depends on its kind:\\n- Buttons and 1D axis values like [Enum.UserInputType.MouseWheel] or [VirtualAxis] will always return [Vector2.zero].\\n- [Enum.KeyCode.Thumbstick1] and [Enum.KeyCode.Thumbstick2] returns the `(X, Y)` value of [InputObject.Position].\\n- [Enum.UserInputType.MouseMovement] returns the `(X, -Y)` value of [InputObject.Delta].\\n- [VirtualAxis2d] returns `Vector2.new(rightValue - leftValue, upValue - downValue)`.\\n\\n:::warning\\nThe returned Vector2 is not clamped to any range. Consider using [Actions:normalizedAxis2d] or [Actions:clampedAxis2d].\\n:::","params":[{"name":"action","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Vector2"}],"function_type":"method","source":{"line":203,"path":"src/Actions.lua"}},{"name":"normalizedAxis2d","desc":"Returns the [Actions:axis2d] value but normalized. If the value is `Vector2.zero`, `Vector2.zero` will be returned.","params":[{"name":"action","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Vector2"}],"function_type":"method","source":{"line":213,"path":"src/Actions.lua"}},{"name":"clampedAxis2d","desc":"Returns the [Actions:axis2d] value but with the length clamped to `1`. This allows for `Vector2s` with a length less than `1` which is useful for gamepad and mobile thumbsticks.","params":[{"name":"action","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Vector2"}],"function_type":"method","source":{"line":229,"path":"src/Actions.lua"}},{"name":"hold","desc":"Presses `action` manually like a button. It returns a function to cancel the hold.\\n\\nThis can be called more than once at the same time and each call will represent a different button press.\\n\\nThis is useful to implement mobile buttons.\\n\\n:::warning\\nThe returned function will error if called more than once.\\n:::","params":[{"name":"action","desc":"","lua_type":"string"}],"returns":[{"desc":"A function that when called, stops the hold.","lua_type":"() -> ()"}],"function_type":"method","source":{"line":253,"path":"src/Actions.lua"}},{"name":"move","desc":"Increases the axis2d value of `action` by `vector`.\\n\\nThis value resets after [Actions:update] is called.\\n\\nThis is useful to implement a mobile thumbstick.","params":[{"name":"action","desc":"","lua_type":"string"},{"name":"vector","desc":"","lua_type":"Vector2"}],"returns":[{"desc":"","lua_type":"Vector2"}],"function_type":"method","source":{"line":281,"path":"src/Actions.lua"}}],"properties":[],"types":[],"name":"Actions","desc":"Updates and reads action state.\\n\\n```lua\\nlocal actions = Actions.new({ \\"move\\", \\"jump\\" })\\n\\nlocal disconnect = actions:justPressedSignal(\\"jump\\"):connect(function()\\n\\tprint(\\"Jumped!\\")\\nend)\\n\\nlocal moveVector = actions:axis2d(\\"move\\")\\n```\\n\\n:::note\\n[Actions:update] should be called every frame before calling [InputState:clear].\\n:::","source":{"line":24,"path":"src/Actions.lua"}}')}}]);