"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[973],{34882:function(e){e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a new empty Bindings.","params":[{"name":"actions","desc":"","lua_type":"Actions"}],"returns":[{"desc":"","lua_type":"Bindings"}],"function_type":"static","source":{"line":48,"path":"src/Bindings.lua"}},{"name":"fromSerialized","desc":"Creates a new Bindings with the serialized bindings.","params":[{"name":"actions","desc":"","lua_type":"Actions"},{"name":"serialized","desc":"Serialized bindings returned from [`Bindings:serialize`](/api/Bindings/serialize).","lua_type":"{}"}],"returns":[{"desc":"","lua_type":"Bindings"}],"function_type":"static","source":{"line":62,"path":"src/Bindings.lua"}},{"name":"bind","desc":"Adds the `control` to the action\'s bindings.","params":[{"name":"name","desc":"The name of the action.","lua_type":"string"},{"name":"control","desc":"The control that gets mapped to the action.","lua_type":"Control"},{"name":"group","desc":"The name of the group the binding belongs to. This is useful for rebinding controls in a specific group.","lua_type":"string?"}],"returns":[{"desc":"Returns itself","lua_type":"Bindings"}],"function_type":"method","errors":[{"lua_type":"\\"Action \'name\' does not exist\\"","desc":"Thrown when the action does not exist."},{"lua_type":"\\"Cannot use control with ActionKind.\\"","desc":"Thrown when the control cannot be used with the action\'s ActionKind."}],"source":{"line":104,"path":"src/Bindings.lua"}},{"name":"filter","desc":"```lua\\n-- Remove all bindings with the group \\"Controller\\".\\nbindings:filter(\\"Move\\", function(group)\\n\\treturn group ~= \\"Controller\\"\\nend)\\n```","params":[{"name":"name","desc":"The name of the action.","lua_type":"string"},{"name":"predicate","desc":"A function that takes the binding\'s group and returns `false` if the binding should be removed.","lua_type":"(string) -> boolean"}],"returns":[],"function_type":"method","source":{"line":139,"path":"src/Bindings.lua"}},{"name":"forEachComposite","desc":"Iterates over every composite in an action\'s bindings.\\n\\n```lua\\n-- Change the `up` control of composites with group \\"Keyboard1\\".\\nbindings:forEachComposite(\\"Move\\", function(composite, group)\\n\\tif group == \\"Keyboard1\\" then\\n\\t\\tcomposite.up = Devices.Keyboard.W\\n\\tend\\nend)\\n```","params":[{"name":"name","desc":"The name of the action.","lua_type":"string"},{"name":"forEach","desc":"A function that takes the composite and its group.","lua_type":"(Composite1d | Composite2d, string) -> ()"}],"returns":[],"function_type":"method","source":{"line":173,"path":"src/Bindings.lua"}},{"name":"serialize","desc":"Returns a serialized version of the bindings for saving.","params":[],"returns":[{"desc":"","lua_type":"{}"}],"function_type":"method","source":{"line":192,"path":"src/Bindings.lua"}}],"properties":[],"types":[{"name":"Control","desc":"","lua_type":"ButtonControl | Axis1dControl | Axis2dControl | Composite1d | Composite2d","source":{"line":23,"path":"src/Bindings.lua"}}],"name":"Bindings","desc":"Stores a map of actions to their controls.\\n\\nMultiple controls can be mapped to the same action and each control can be mapped to multiple actions.\\n\\n```lua\\nlocal bindings = Bindings.new(actions)\\n\\t:bind(\\"Jump\\", Keyboard.Space)\\n\\t:bind(\\"Look\\", Mouse.Delta)\\n\\nactions:setBindings(bindings)\\n```","source":{"line":39,"path":"src/Bindings.lua"}}')}}]);