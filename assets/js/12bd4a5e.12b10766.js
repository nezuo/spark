"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[761],{40778:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates an empty InputMap.","params":[],"returns":[{"desc":"","lua_type":"InputMap"}],"function_type":"static","source":{"line":96,"path":"src/InputMap.lua"}},{"name":"deserialize","desc":"Deserializes the buffer returned from [InputMap:serialize] back into an InputMap.","params":[{"name":"serialized","desc":"","lua_type":"buffer"}],"returns":[{"desc":"","lua_type":"InputMap"}],"function_type":"static","source":{"line":108,"path":"src/InputMap.lua"}},{"name":"insert","desc":"Maps inputs to `action`.\\n\\nIf an input is already mapped to the `action`, it won\'t be mapped again.","params":[{"name":"action","desc":"","lua_type":"string"},{"name":"...","desc":"","lua_type":"Input"}],"returns":[{"desc":"Returns self","lua_type":"InputMap"}],"function_type":"method","source":{"line":146,"path":"src/InputMap.lua"}},{"name":"remove","desc":"Removes the mapping from `input` to `action` if it exists.","params":[{"name":"action","desc":"","lua_type":"string"},{"name":"input","desc":"","lua_type":"Input"}],"returns":[],"function_type":"method","source":{"line":166,"path":"src/InputMap.lua"}},{"name":"get","desc":"Gets the inputs mapped to `action`.","params":[{"name":"action","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"{ Input }"}],"function_type":"method","source":{"line":182,"path":"src/InputMap.lua"}},{"name":"getByDevices","desc":"Gets the inputs mapped to `action` that belong to `devices`.\\n\\nIf a [VirtualAxis] or [VirtualAxis2d] has a [Button] that belongs to `devices` it will be included.\\n\\n```lua\\nlocal inputMap = InputMap.new():insert(\\"action\\", Enum.KeyCode.Space, Enum.UserInputType.MouseButton1)\\n\\nprint(inputMap:getByDevices(\\"action\\", { \\"Keyboard\\" })) -- { Enum.KeyCode.Space }\\nprint(inputMap:getByDevices(\\"action\\", { \\"Mouse\\" })) -- { Enum.UserInputType.MouseButton1 }\\n```","params":[{"name":"action","desc":"","lua_type":"string"},{"name":"devices","desc":"","lua_type":"{ Device }"}],"returns":[{"desc":"","lua_type":"{ Input }"}],"function_type":"method","source":{"line":206,"path":"src/InputMap.lua"}},{"name":"clone","desc":"Clones the `InputMap`.","params":[],"returns":[{"desc":"","lua_type":"InputMap"}],"function_type":"method","source":{"line":226,"path":"src/InputMap.lua"}},{"name":"serialize","desc":"Returns a serialized version of the `InputMap` as a buffer. This can be used to save or replicate it.","params":[],"returns":[{"desc":"","lua_type":"buffer"}],"function_type":"method","source":{"line":235,"path":"src/InputMap.lua"}}],"properties":[{"name":"associatedGamepad","desc":"If `associatedGamepad` is nil, the connected gamepad with the lowest number will be used.\\n\\nThe [Enum.UserInputType] must represent a gamepad.","lua_type":"Enum.UserInputType?","source":{"line":74,"path":"src/InputMap.lua"}}],"types":[],"name":"InputMap","desc":"Maps actions to their inputs.\\n\\nMultiple inputs can be mapped to the same action and each input can be mapped to multiple actions.\\n\\n```lua\\nlocal inputMap = InputMap.new()\\n\\t:insert(\\"fire\\", Enum.UserInputType.MouseButton1)\\n\\t:insert(\\"jump\\", Enum.KeyCode.Space)\\n```","source":{"line":88,"path":"src/InputMap.lua"}}')}}]);