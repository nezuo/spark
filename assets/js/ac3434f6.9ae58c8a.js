"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[908],{96725:function(e){e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a new empty InputMap.","params":[],"returns":[{"desc":"","lua_type":"InputMap"}],"function_type":"static","source":{"line":54,"path":"src/InputMap.lua"}},{"name":"fromSerialized","desc":"Creates a new InputMap from a serialized input map.","params":[{"name":"serialized","desc":"Serialized input map returned from [`InputMap:serialize`](/api/InputMap/serialize).","lua_type":"{}"}],"returns":[{"desc":"","lua_type":"InputMap"}],"function_type":"static","source":{"line":66,"path":"src/InputMap.lua"}},{"name":"insert","desc":"Inserts a mapping between an action an an input.\\n\\nIf the action already has the input, it will be removed and re-inserted at the end of the inputs.","params":[{"name":"name","desc":"The name of the action.","lua_type":"string"},{"name":"input","desc":"The input that gets mapped to the action.","lua_type":"Input"}],"returns":[{"desc":"Returns itself.","lua_type":"InputMap"}],"function_type":"method","source":{"line":89,"path":"src/InputMap.lua"}},{"name":"insertMultiple","desc":"Inserts mappings between an action and the provided inputs.","params":[{"name":"name","desc":"The name of the action.","lua_type":"string"},{"name":"inputs","desc":"The inputs that get mapped to the action.","lua_type":"{ Input }"}],"returns":[{"desc":"Returns itself.","lua_type":"InputMap"}],"function_type":"method","source":{"line":108,"path":"src/InputMap.lua"}},{"name":"get","desc":"Gets the inputs for a given action.","params":[{"name":"name","desc":"The name of the action.","lua_type":"string"}],"returns":[{"desc":"Returns the action\'s inputs.","lua_type":"{ Input }"}],"function_type":"method","source":{"line":122,"path":"src/InputMap.lua"}},{"name":"remove","desc":"Removes an input from an action if the action has that input.","params":[{"name":"name","desc":"The name of the action.","lua_type":"string"},{"name":"input","desc":"The input to remove from the action.","lua_type":"Input"}],"returns":[],"function_type":"method","source":{"line":136,"path":"src/InputMap.lua"}},{"name":"serialize","desc":"Returns a serialized version of the input map that can be saved and loaded with [`InputMap.fromSerialized`](/api/InputMap/fromSerialized).","params":[],"returns":[{"desc":"","lua_type":"{}"}],"function_type":"method","source":{"line":153,"path":"src/InputMap.lua"}}],"properties":[],"types":[],"name":"InputMap","desc":"Stores a map of actions to their inputs.\\n\\nMultiple inputs can be mapped to the same action and each input can be mapped to multiple actions.\\n\\n```lua\\nactions.inputMap = InputMap.new(actions)\\n\\t:insert(\\"Jump\\", Keyboard.Space)\\n\\t:insert(\\"Look\\", Mouse.Delta)\\n```","source":{"line":46,"path":"src/InputMap.lua"}}')}}]);