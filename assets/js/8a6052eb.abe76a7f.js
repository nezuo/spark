"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[416],{24067:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>l,frontMatter:()=>s,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"GettingStarted","title":"Getting Started","description":"","source":"@site/docs/GettingStarted.md","sourceDirName":".","slug":"/GettingStarted","permalink":"/spark/docs/GettingStarted","draft":false,"unlisted":false,"editUrl":"https://github.com/nezuo/spark/edit/master/docs/GettingStarted.md","tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"Spark","permalink":"/spark/docs/intro"},"next":{"title":"Mobile","permalink":"/spark/docs/Mobile"}}');var a=n(74848),i=n(28453);const s={},r="Getting Started",c={},d=[];function u(e){const t={code:"code",h1:"h1",header:"header",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"getting-started",children:"Getting Started"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-lua",children:'-- First we create the InputState object. This should only be created once.\nlocal inputState = InputState.new()\n\n-- Next, we create our Actions object.\n-- The casting is optional but will provide autocomplete/typechecking for the action names.\nlocal actions = (Actions.new({ "jump", "attack", "move" }) :: any) :: Spark.Actions<"jump" | "attack" | "move">\n\n-- Next, we set the callback to setup up the bindings for each action.\n-- This will be called once here and anytime actions:rebuildBindings() is called.\nactions:setRebuildBindings(function(bindings)\n    bindings:bind("jump", Enum.KeyCode.Space, Enum.KeyCode.ButtonA)\n    bindings:bind("attack", Enum.UserInputType.MouseButton1, Enum.KeyCode.ButtonR1)\n    bindings:bind("move", VirtualAxis2d.wasd(), Enum.KeyCode.Thumbstick1)\nend)\n\n-- You need to update your Actions objects each frame before any code that reads from it.\nRunService:BindToRenderStep("Spark", Enum.RenderPriority.Input.Value, function()\n    -- First we update our Actions object with the InputState.\n    actions:update(inputState)\n\n    -- InputState:clear needs to be called after updating all Actions objects.\n    -- It resets the values of the mouse wheel and mouse movement so they don\'t persist across frames.\n    inputState:clear()\nend)\n'})})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>r});var o=n(96540);const a={},i=o.createContext(a);function s(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);