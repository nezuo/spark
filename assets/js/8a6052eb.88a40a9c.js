"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[63],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),l=s(n),m=o,f=l["".concat(u,".").concat(m)]||l[m]||d[m]||a;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var c={};for(var u in t)hasOwnProperty.call(t,u)&&(c[u]=t[u]);c.originalType=e,c[l]="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},47282:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var r=n(87462),o=(n(67294),n(3905));const a={},i="Getting Started",c={unversionedId:"GettingStarted",id:"GettingStarted",title:"Getting Started",description:"",source:"@site/docs/GettingStarted.md",sourceDirName:".",slug:"/GettingStarted",permalink:"/spark/docs/GettingStarted",draft:!1,editUrl:"https://github.com/nezuo/spark/edit/master/docs/GettingStarted.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Spark",permalink:"/spark/docs/intro"},next:{title:"Mobile",permalink:"/spark/docs/Mobile"}},u={},s=[],p={toc:s},l="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(l,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"getting-started"},"Getting Started"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'-- First we create the InputState object. This should only be created once.\nlocal inputState = InputState.new()\n\n-- Next, we create our Actions object.\nlocal actions = Actions.new({ "jump", "attack", "move" })\n\n-- Next, we create our InputMap. This stores our mappings from inputs to actions.\n-- This object can be used for rebinding.\nlocal inputMap = InputMap.new()\n    :insert("jump", Enum.KeyCode.Space, Enum.KeyCode.ButtonA)\n    :insert("attack", Enum.UserInputType.MouseButton1, Enum.KeyCode.ButtonR1)\n    :insert("move", VirtualAxis2d.wasd(), Enum.KeyCode.Thumbstick1)\n\n-- You need to update your Actions objects each frame before any code that reads action values.\nRunService:BindToRenderStep("Spark", Enum.RenderPriority.Input.Value, function()\n    -- First we update our Actions object given the InputState and the associated InputMap.\n    actions:update(inputState, inputMap)\n\n    -- InputState:clear needs to be called after updating all Actions objects.\n    -- It resets the values of the mouse wheel and mouse movement so they don\'t persist across frames.\n    inputState:clear()\nend)\n')))}d.isMDXComponent=!0}}]);