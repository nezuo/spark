{"searchDocs":[{"title":"ActionConfig","type":0,"sectionRef":"#","url":"/spark/api/ActionConfig","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"ActionConfig","url":"/spark/api/ActionConfig#functions","content":" ","version":null,"tagName":"h2"},{"title":"addModifiers​","type":1,"pageTitle":"ActionConfig","url":"/spark/api/ActionConfig#addModifiers","content":"&lt;/&gt; ActionConfig:addModifiers(...: Modifier) → ActionConfig-- Returns self Adds modifiers to the action. ","version":null,"tagName":"h3"},{"title":"Bindings","type":0,"sectionRef":"#","url":"/spark/api/Bindings","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Bindings","url":"/spark/api/Bindings#functions","content":" ","version":null,"tagName":"h2"},{"title":"bind​","type":1,"pageTitle":"Bindings","url":"/spark/api/Bindings#bind","content":"&lt;/&gt; Bindings:bind( action: string, ...: Bind | Input-- Inputs to bind to the action ) → ()  ","version":null,"tagName":"h3"},{"title":"Bind","type":0,"sectionRef":"#","url":"/spark/api/Bind","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Bind","url":"/spark/api/Bind#functions","content":" ","version":null,"tagName":"h2"},{"title":"addModifiers​","type":1,"pageTitle":"Bind","url":"/spark/api/Bind#addModifiers","content":"&lt;/&gt; Bind:addModifiers(...: Modifier) → Bind-- Returns self Adds modifiers to the Bind's inputs. ","version":null,"tagName":"h3"},{"title":"Spark","type":0,"sectionRef":"#","url":"/spark/docs/intro","content":"Spark Spark is an input-action manager for Roblox. To get started, visit the Getting Started page.","keywords":"","version":"Next"},{"title":"Modifiers","type":0,"sectionRef":"#","url":"/spark/api/Modifiers","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Modifiers","url":"/spark/api/Modifiers#functions","content":" ","version":null,"tagName":"h2"},{"title":"deadZone​","type":1,"pageTitle":"Modifiers","url":"/spark/api/Modifiers#deadZone","content":"&lt;/&gt; Modifiers.deadZone( kind: &quot;Radial&quot; | &quot;Axial&quot;,-- The shape of the deadzone lowerThreshold: number-- Threshold to cut off the input ) → Modifier Applies a deadzone to the input, then rescales the remainder to 0-1. Radial: Applies the deadzone to the magnitude of the vector which preserves the direction. Axial: Applies the deadzone to each axis independently which yields a square region. For a deeper comparison, see:https://www.gamedeveloper.com/business/doing-thumbstick-dead-zones-right  ","version":null,"tagName":"h3"},{"title":"Signal","type":0,"sectionRef":"#","url":"/spark/api/Signal","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Signal","url":"/spark/api/Signal#functions","content":" ","version":null,"tagName":"h2"},{"title":"connect​","type":1,"pageTitle":"Signal","url":"/spark/api/Signal#connect","content":"&lt;/&gt; Signal:connect(connection: function | thread) → () → ()-- A function that when called, disconnects the connection.  ","version":null,"tagName":"h3"},{"title":"InputState","type":0,"sectionRef":"#","url":"/spark/api/InputState","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"InputState","url":"/spark/api/InputState#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"InputState","url":"/spark/api/InputState#new","content":"&lt;/&gt; InputState.new() → InputState Creates a new InputState.  ","version":null,"tagName":"h3"},{"title":"clear​","type":1,"pageTitle":"InputState","url":"/spark/api/InputState#clear","content":"&lt;/&gt; InputState:clear() → () This clears mouse wheel and mouse delta data so it doesn't persist across frames. This should be called once every frame after Actions:update is called. ","version":null,"tagName":"h3"},{"title":"scale​","type":1,"pageTitle":"Modifiers","url":"/spark/api/Modifiers#scale","content":"&lt;/&gt; Modifiers.scale( axisScale: number, axis2dScale: Vector2 ) → Modifier Scales the axis and axis2d values by the given scale factors. Use this to adjust the sensitivity of the input. ","version":null,"tagName":"h3"},{"title":"Rebind","type":0,"sectionRef":"#","url":"/spark/api/Rebind","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Rebind","url":"/spark/api/Rebind#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Rebind","url":"/spark/api/Rebind#new","content":"&lt;/&gt; Rebind.new() → Rebind Creates a new Rebind. To query for a button, call Rebind:start.  ","version":null,"tagName":"h3"},{"title":"withDevices​","type":1,"pageTitle":"Rebind","url":"/spark/api/Rebind#withDevices","content":"&lt;/&gt; Rebind:withDevices(devices: {Device}) → Rebind-- Returns self By default, inputs from all devices are included. When called, this method will only include the specified devices.  ","version":null,"tagName":"h3"},{"title":"withoutInputs​","type":1,"pageTitle":"Rebind","url":"/spark/api/Rebind#withoutInputs","content":"&lt;/&gt; Rebind:withoutInputs(inputs: {Button}) → Rebind-- Returns self Excludes inputs from being chosen.  ","version":null,"tagName":"h3"},{"title":"setRetainInput​","type":1,"pageTitle":"Rebind","url":"/spark/api/Rebind#setRetainInput","content":"&lt;/&gt; Rebind:setRetainInput(callback: ( input: Button, sunk: boolean ) → boolean) → Rebind-- Returns self Sets a callback that determines if an input can be returned by Rebind. Rebind.new() :setRetainInput(function(input, sunk) if sunk then -- Ignore inputs that are sunk. return false end -- Don't allow the Escape key. return input ~= Enum.KeyCode.Escape end)   ","version":null,"tagName":"h3"},{"title":"start​","type":1,"pageTitle":"Rebind","url":"/spark/api/Rebind#start","content":"&lt;/&gt; Rebind:start() → Promise&lt;Button&gt; Returns a Promise that resolves with the first Button the user presses. The promise can be cancelled if you no longer need the result. ","version":null,"tagName":"h3"},{"title":"VirtualAxis","type":0,"sectionRef":"#","url":"/spark/api/VirtualAxis","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"VirtualAxis","url":"/spark/api/VirtualAxis#properties","content":" ","version":null,"tagName":"h2"},{"title":"positive​","type":1,"pageTitle":"VirtualAxis","url":"/spark/api/VirtualAxis#positive","content":"&lt;/&gt; VirtualAxis.positive: Button?   ","version":null,"tagName":"h3"},{"title":"negative​","type":1,"pageTitle":"VirtualAxis","url":"/spark/api/VirtualAxis#negative","content":"&lt;/&gt; VirtualAxis.negative: Button?  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"VirtualAxis","url":"/spark/api/VirtualAxis#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"VirtualAxis","url":"/spark/api/VirtualAxis#new","content":"&lt;/&gt; VirtualAxis.new(options: { postive: Button?, negative: Button? }) → VirtualAxis Creates a VirtualAxis with the corresponding options.  ","version":null,"tagName":"h3"},{"title":"horizontalArrowKeys​","type":1,"pageTitle":"VirtualAxis","url":"/spark/api/VirtualAxis#horizontalArrowKeys","content":"&lt;/&gt; VirtualAxis.horizontalArrowKeys() → VirtualAxis Creates a VirtualAxis corresponding to the left and right arrow keys.  ","version":null,"tagName":"h3"},{"title":"verticalArrowKeys​","type":1,"pageTitle":"VirtualAxis","url":"/spark/api/VirtualAxis#verticalArrowKeys","content":"&lt;/&gt; VirtualAxis.verticalArrowKeys() → VirtualAxis Creates a VirtualAxis corresponding to the up and down arrow keys. ","version":null,"tagName":"h3"},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/spark/docs/GettingStarted","content":"Getting Started -- First we create the InputState object. This should only be created once. local inputState = InputState.new() -- Next, we create our Actions object. -- The casting is optional but will provide autocomplete/typechecking for the action names. local actions = (Actions.new({ &quot;jump&quot;, &quot;attack&quot;, &quot;move&quot; }) :: any) :: Spark.Actions&lt;&quot;jump&quot; | &quot;attack&quot; | &quot;move&quot;&gt; -- Next, we set the callback to setup up the bindings for each action. -- This will be called once here and anytime actions:rebuildBindings() is called. actions:setRebuildBindings(function(bindings) bindings:bind(&quot;jump&quot;, Enum.KeyCode.Space, Enum.KeyCode.ButtonA) bindings:bind(&quot;attack&quot;, Enum.UserInputType.MouseButton1, Enum.KeyCode.ButtonR1) bindings:bind(&quot;move&quot;, VirtualAxis2d.wasd(), Enum.KeyCode.Thumbstick1) end) -- You need to update your Actions objects each frame before any code that reads from it. RunService:BindToRenderStep(&quot;Spark&quot;, Enum.RenderPriority.Input.Value, function() -- First we update our Actions object with the InputState. actions:update(inputState) -- InputState:clear needs to be called after updating all Actions objects. -- It resets the values of the mouse wheel and mouse movement so they don't persist across frames. inputState:clear() end) ","keywords":"","version":"Next"},{"title":"Spark","type":0,"sectionRef":"#","url":"/spark/api/Spark","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Spark","url":"/spark/api/Spark#types","content":" ","version":null,"tagName":"h2"},{"title":"Button​","type":1,"pageTitle":"Spark","url":"/spark/api/Spark#Button","content":"&lt;/&gt; type Button = Enum.KeyCode | Enum.UserInputType Enum.UserInputType must represent a button. Inputs like Enum.UserInputType.MouseMovement will not work as a button.  ","version":null,"tagName":"h3"},{"title":"Input​","type":1,"pageTitle":"Spark","url":"/spark/api/Spark#Input","content":"&lt;/&gt; type Input = Enum.KeyCode | Enum.UserInputType | VirtualAxis | VirtualAxis2d   ","version":null,"tagName":"h3"},{"title":"Modifier​","type":1,"pageTitle":"Spark","url":"/spark/api/Spark#Modifier","content":"&lt;/&gt; type Modifier = ( pressed: boolean, axis: number, axis2d: Vector2 ) → ( boolean, number, Vector2 )  ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Spark","url":"/spark/api/Spark#properties","content":" ","version":null,"tagName":"h2"},{"title":"Modifiers​","type":1,"pageTitle":"Spark","url":"/spark/api/Spark#Modifiers","content":"&lt;/&gt; Spark.Modifiers: Modifiers   ","version":null,"tagName":"h3"},{"title":"Actions​","type":1,"pageTitle":"Spark","url":"/spark/api/Spark#Actions","content":"&lt;/&gt; Spark.Actions: Actions   ","version":null,"tagName":"h3"},{"title":"InputMap​","type":1,"pageTitle":"Spark","url":"/spark/api/Spark#InputMap","content":"&lt;/&gt; Spark.InputMap: InputMap   ","version":null,"tagName":"h3"},{"title":"InputState​","type":1,"pageTitle":"Spark","url":"/spark/api/Spark#InputState","content":"&lt;/&gt; Spark.InputState: InputState   ","version":null,"tagName":"h3"},{"title":"Rebind​","type":1,"pageTitle":"Spark","url":"/spark/api/Spark#Rebind","content":"&lt;/&gt; Spark.Rebind: Rebind   ","version":null,"tagName":"h3"},{"title":"Signal​","type":1,"pageTitle":"Spark","url":"/spark/api/Spark#Signal","content":"&lt;/&gt; Spark.Signal: Signal   ","version":null,"tagName":"h3"},{"title":"VirtualAxis​","type":1,"pageTitle":"Spark","url":"/spark/api/Spark#VirtualAxis","content":"&lt;/&gt; Spark.VirtualAxis: VirtualAxis   ","version":null,"tagName":"h3"},{"title":"VirtualAxis2d​","type":1,"pageTitle":"Spark","url":"/spark/api/Spark#VirtualAxis2d","content":"&lt;/&gt; Spark.VirtualAxis2d: VirtualAxis2d  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Spark","url":"/spark/api/Spark#functions","content":" ","version":null,"tagName":"h2"},{"title":"getDeviceFromInput​","type":1,"pageTitle":"Spark","url":"/spark/api/Spark#getDeviceFromInput","content":"&lt;/&gt; Spark.getDeviceFromInput(input: Button) → Device? ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"Spark","url":"/spark/api/Spark##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"Spark","url":"/spark/api/Spark#Device","content":"type Device = &quot;Keyboard&quot; | &quot;Mouse&quot; | &quot;Gamepad&quot;  Returns the Device for the given input if it exists. ","version":null,"tagName":"h3"},{"title":"VirtualAxis2d","type":0,"sectionRef":"#","url":"/spark/api/VirtualAxis2d","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"VirtualAxis2d","url":"/spark/api/VirtualAxis2d#properties","content":" ","version":null,"tagName":"h2"},{"title":"up​","type":1,"pageTitle":"VirtualAxis2d","url":"/spark/api/VirtualAxis2d#up","content":"&lt;/&gt; VirtualAxis2d.up: Button?   ","version":null,"tagName":"h3"},{"title":"down​","type":1,"pageTitle":"VirtualAxis2d","url":"/spark/api/VirtualAxis2d#down","content":"&lt;/&gt; VirtualAxis2d.down: Button?   ","version":null,"tagName":"h3"},{"title":"left​","type":1,"pageTitle":"VirtualAxis2d","url":"/spark/api/VirtualAxis2d#left","content":"&lt;/&gt; VirtualAxis2d.left: Button?   ","version":null,"tagName":"h3"},{"title":"right​","type":1,"pageTitle":"VirtualAxis2d","url":"/spark/api/VirtualAxis2d#right","content":"&lt;/&gt; VirtualAxis2d.right: Button?  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"VirtualAxis2d","url":"/spark/api/VirtualAxis2d#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"VirtualAxis2d","url":"/spark/api/VirtualAxis2d#new","content":"&lt;/&gt; VirtualAxis2d.new(options: { up: Button?, down: Button?, left: Button?, right: Button? }) → VirtualAxis2d Creates a VirtualAxis2d with the corresponding options.  ","version":null,"tagName":"h3"},{"title":"arrowKeys​","type":1,"pageTitle":"VirtualAxis2d","url":"/spark/api/VirtualAxis2d#arrowKeys","content":"&lt;/&gt; VirtualAxis2d.arrowKeys() → VirtualAxis2d Creates a VirtualAxis2d corresponding to the arrow keys.  ","version":null,"tagName":"h3"},{"title":"wasd​","type":1,"pageTitle":"VirtualAxis2d","url":"/spark/api/VirtualAxis2d#wasd","content":"&lt;/&gt; VirtualAxis2d.wasd() → VirtualAxis2d Creates a VirtualAxis2d corresponding to the WASD keys.  ","version":null,"tagName":"h3"},{"title":"dPad​","type":1,"pageTitle":"VirtualAxis2d","url":"/spark/api/VirtualAxis2d#dPad","content":"&lt;/&gt; VirtualAxis2d.dPad() → VirtualAxis2d Creates a VirtualAxis2d corresponding to the DPad on gamepads. ","version":null,"tagName":"h3"},{"title":"Mobile","type":0,"sectionRef":"#","url":"/spark/docs/Mobile","content":"Mobile Spark allows you to activate an action manually. This is especially useful to implement mobile touch controls. For buttons, you can activate an action with Actions:press. Here's how you might implement a mobile button: local imageButton = Instance.new(&quot;ImageButton&quot;) local hold = nil imageButton.InputBegan:Connect(function(inputObject) if inputObject.UserInputState ~= Enum.UserInputState.Begin then -- UserInputState will be Change if the touch was dragged onto the button. return end if hold == nil then -- Press the button every frame before input is updated. If held inputs don't matter, you could call press without a loop. local connection = RunService.PreRender:Connect(function() actions:press(&quot;attack&quot;) end) hold = { connection = connection, inputObject = inputObject, } end end) imageButton.InputEnded:Connect(function(inputObject) -- Only stop the hold if it's the same touch that started it. if hold ~= nil and hold.inputObject == inputObject then hold.connection:Disconnect() hold = nil end end) For 1D/2D axis values like movement, camera movement, or camera zoom, use Actions:moveAxis and Actions:moveAxis2d. local thumbstickDirection = Vector2.one -- Get this value from your thumbstick. -- This will increase the 2D axis value of the move action by thumbstickDirection. -- It's reset every time `Actions:update` is called, so you need to call it every frame. actions:moveAxis2d(&quot;move&quot;, thumbstickDirection) local cameraZoomDelta = 0 -- Could be a value from a pinch motion actions:moveAxis(&quot;cameraZoom&quot;, cameraZoomDelta) ","keywords":"","version":"Next"},{"title":"Actions","type":0,"sectionRef":"#","url":"/spark/api/Actions","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Actions","url":"/spark/api/Actions#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Actions","url":"/spark/api/Actions#new","content":"&lt;/&gt; Actions.new( actions: {string}-- List of action names ) → Actions Creates a new Actions.  ","version":null,"tagName":"h3"},{"title":"setAssociatedGamepad​","type":1,"pageTitle":"Actions","url":"/spark/api/Actions#setAssociatedGamepad","content":"&lt;/&gt; Actions:setAssociatedGamepad(gamepad: Enum.UserInputType) → () Sets the gamepad that will be used to check for gamepad inputs. local actions = Actions.new({ &quot;move&quot;, &quot;jump&quot; }) actions:setAssociatedGamepad(Enum.UserInputType.Gamepad1)   ","version":null,"tagName":"h3"},{"title":"removeAssociatedGamepad​","type":1,"pageTitle":"Actions","url":"/spark/api/Actions#removeAssociatedGamepad","content":"&lt;/&gt; Actions:removeAssociatedGamepad() → () Removes the associated gamepad and instead uses the first connected gamepad.  ","version":null,"tagName":"h3"},{"title":"setRebuildBindings​","type":1,"pageTitle":"Actions","url":"/spark/api/Actions#setRebuildBindings","content":"&lt;/&gt; Actions:setRebuildBindings(rebuildBindings: (bindings: Bindings) → ()) → Actions-- Returns self Sets the callback that binds inputs to actions. The callback will be called in this function and whenever Actions:rebuildBindings is called. local actions = Actions.new({ &quot;move&quot;, &quot;jump&quot; }):setRebuildBindings(function(bindings) bindings:bind(&quot;jump&quot;, Enum.KeyCode.Space) end)   ","version":null,"tagName":"h3"},{"title":"rebuildBindings​","type":1,"pageTitle":"Actions","url":"/spark/api/Actions#rebuildBindings","content":"&lt;/&gt; Actions:rebuildBindings() → () Updates action bindings by calling the callback set by Actions:setRebuildBindings.  ","version":null,"tagName":"h3"},{"title":"update​","type":1,"pageTitle":"Actions","url":"/spark/api/Actions#update","content":"&lt;/&gt; Actions:update(inputState: InputState) → () Updates action states. This should be called once every frame before calling InputState:clear.  ","version":null,"tagName":"h3"},{"title":"pressed​","type":1,"pageTitle":"Actions","url":"/spark/api/Actions#pressed","content":"&lt;/&gt; Actions:pressed(action: string) → boolean Returns whether action is currently pressed.  ","version":null,"tagName":"h3"},{"title":"released​","type":1,"pageTitle":"Actions","url":"/spark/api/Actions#released","content":"&lt;/&gt; Actions:released(action: string) → boolean Returns whether action is currently released.  ","version":null,"tagName":"h3"},{"title":"justPressedSignal​","type":1,"pageTitle":"Actions","url":"/spark/api/Actions#justPressedSignal","content":"&lt;/&gt; Actions:justPressedSignal(action: string) → Signal Returns a Signal that is fired when action is pressed. local disconnect = actions:justPressedSignal(&quot;jump&quot;):connect(function() print(&quot;Jump pressed!&quot;) end) disconnect()   ","version":null,"tagName":"h3"},{"title":"justReleasedSignal​","type":1,"pageTitle":"Actions","url":"/spark/api/Actions#justReleasedSignal","content":"&lt;/&gt; Actions:justReleasedSignal(action: string) → Signal Returns a Signal that is fired when action is released. local disconnect = actions:justReleasedSignal(&quot;jump&quot;):connect(function() print(&quot;Jump released!&quot;) end) disconnect()   ","version":null,"tagName":"h3"},{"title":"axis​","type":1,"pageTitle":"Actions","url":"/spark/api/Actions#axis","content":"&lt;/&gt; Actions:axis(action: string) → number Returns the sum of the axis values of each input bound to action. The axis value of an input depends on its kind: Buttons have a value of 0 when released and 1 when pressed. Enum.UserInputType.MouseWheel returns the Z value of InputObject.Position. VirtualAxis returns the value of the positive input minus the value of the negative input. 2D axis values like Enum.UserInputType.MouseMovement, Enum.KeyCode.Thumbstick1, or [VirutalAxis2d] will return their magnitude. WARNING The return value is not clamped to any range.  ","version":null,"tagName":"h3"},{"title":"axis2d​","type":1,"pageTitle":"Actions","url":"/spark/api/Actions#axis2d","content":"&lt;/&gt; Actions:axis2d(action: string) → Vector2  Returns the sum of axis 2D values of each input bound to action. The axis 2D value of an input depends on its kind: Buttons and 1D axis values like Enum.UserInputType.MouseWheel or VirtualAxis will always return Vector2.zero. Enum.KeyCode.Thumbstick1 and Enum.KeyCode.Thumbstick2 returns the (X, Y) value of InputObject.Position. Enum.UserInputType.MouseMovement returns the (X, -Y) value of InputObject.Delta. VirtualAxis2d returns Vector2.new(rightValue - leftValue, upValue - downValue). WARNING The returned Vector2 is not clamped to any range. Consider using Actions:normalizedAxis2d or Actions:clampedAxis2d.  ","version":null,"tagName":"h3"},{"title":"normalizedAxis2d​","type":1,"pageTitle":"Actions","url":"/spark/api/Actions#normalizedAxis2d","content":"&lt;/&gt; Actions:normalizedAxis2d(action: string) → Vector2  Returns the Actions:axis2d value but normalized. If the value is Vector2.zero, Vector2.zero will be returned.  ","version":null,"tagName":"h3"},{"title":"clampedAxis2d​","type":1,"pageTitle":"Actions","url":"/spark/api/Actions#clampedAxis2d","content":"&lt;/&gt; Actions:clampedAxis2d(action: string) → Vector2  Returns the Actions:axis2d value but with the length clamped to 1. This allows for Vector2s with a length less than 1 which is useful for gamepad and mobile thumbsticks.  ","version":null,"tagName":"h3"},{"title":"press​","type":1,"pageTitle":"Actions","url":"/spark/api/Actions#press","content":"&lt;/&gt; Actions:press(action: string) → () Manually presses action until Actions:update is called. See Mobile for an example of usage with UI buttons.  ","version":null,"tagName":"h3"},{"title":"moveAxis​","type":1,"pageTitle":"Actions","url":"/spark/api/Actions#moveAxis","content":"&lt;/&gt; Actions:moveAxis( action: string, value: number ) → () Increases the axis value of action by value. This value resets after Actions:update is called.  ","version":null,"tagName":"h3"},{"title":"moveAxis2d​","type":1,"pageTitle":"Actions","url":"/spark/api/Actions#moveAxis2d","content":"&lt;/&gt; Actions:moveAxis2d( action: string, value: Vector2 ) → () Increases the axis 2D value of action by value. This value resets after Actions:update is called.  ","version":null,"tagName":"h3"},{"title":"getInputsByDevices​","type":1,"pageTitle":"Actions","url":"/spark/api/Actions#getInputsByDevices","content":"&lt;/&gt; Actions:getInputsByDevices( action: string, devices: {Device} ) → {Input} Returns the list of inputs bound to action that belong to the given devices. If a VirtualAxis or VirtualAxis2d has a Button that belongs to deviecs it will be included. local actions = Actions.new({ &quot;action&quot; }):setRebuildBindings(function(bindings) bindings:bind(&quot;action&quot;, Enum.KeyCode.Space, Enum.UserInputType.MouseButton1) end) print(actions:getInputsByDevices(&quot;action&quot;, { &quot;Keyboard&quot; })) -- { Enum.KeyCode.Space } print(actions:getInputsByDevices(&quot;action&quot;, { &quot;Mouse&quot; })) -- { Enum.UserInputType.MouseButton1 }  ","version":null,"tagName":"h3"}],"options":{"id":"default"}}